import { Lazy, AppliedLazyOperator, AppliedLazyReducer } from "../coreTypes";
type ALO<E, F> = AppliedLazyOperator<E, F>;
type ALR<E, R> = AppliedLazyReducer<E, R>;

// prettier-ignore
export interface Pipe {
  (): <A>(z: Lazy<A>) => Lazy<A>;
  <A, B>(aOp_0: ALO<A, B>): (z: Lazy<A>) => Lazy<B>;
  <A, B, C>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>): (z: Lazy<A>) => Lazy<C>;
  <A, B, C, D>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>): (z: Lazy<A>) => Lazy<D>;
  <A, B, C, D, E>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>): (z: Lazy<A>) => Lazy<E>;
  <A, B, C, D, E, F>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>): (z: Lazy<A>) => Lazy<F>;
  <A, B, C, D, E, F, G>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>): (z: Lazy<A>) => Lazy<G>;
  <A, B, C, D, E, F, G, H>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>): (z: Lazy<A>) => Lazy<H>;
  <A, B, C, D, E, F, G, H, I>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>): (z: Lazy<A>) => Lazy<I>;
  <A, B, C, D, E, F, G, H, I, J>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>): (z: Lazy<A>) => Lazy<J>;
  <A, B, C, D, E, F, G, H, I, J, K>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>): (z: Lazy<A>) => Lazy<K>;
  <A, B, C, D, E, F, G, H, I, J, K, L>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>): (z: Lazy<A>) => Lazy<L>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>): (z: Lazy<A>) => Lazy<M>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>): (z: Lazy<A>) => Lazy<N>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>): (z: Lazy<A>) => Lazy<O>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>): (z: Lazy<A>) => Lazy<P>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>): (z: Lazy<A>) => Lazy<Q>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>): (z: Lazy<A>) => Lazy<R>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>): (z: Lazy<A>) => Lazy<S>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>): (z: Lazy<A>) => Lazy<T>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>): (z: Lazy<A>) => Lazy<U>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>): (z: Lazy<A>) => Lazy<V>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>): (z: Lazy<A>) => Lazy<W>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>): (z: Lazy<A>) => Lazy<X>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>, aOp_23: ALO<X, Y>): (z: Lazy<A>) => Lazy<Y>;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>, aOp_23: ALO<X, Y>, aOp_24: ALO<Y, Z>): (z: Lazy<A>) => Lazy<Z>;
}

// prettier-ignore
export interface Spout {
  (): <A, R>(aRed: ALR<A, R>) => (z: Lazy<A>) => R;
  <A, B>(aOp_0: ALO<A, B>): <R>(aRed: ALR<B, R>) => (z: Lazy<A>) => R;
  <A, B, C>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>): <R>(aRed: ALR<C, R>) => (z: Lazy<A>) => R;
  <A, B, C, D>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>): <R>(aRed: ALR<D, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>): <R>(aRed: ALR<E, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>): <R>(aRed: ALR<F, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>): <R>(aRed: ALR<G, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>): <R>(aRed: ALR<H, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>): <R>(aRed: ALR<I, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>): <R>(aRed: ALR<J, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>): <R>(aRed: ALR<K, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>): <R>(aRed: ALR<L, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>): <R>(aRed: ALR<M, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>): <R>(aRed: ALR<N, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>): <R>(aRed: ALR<O, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>): <R>(aRed: ALR<P, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>): <R>(aRed: ALR<Q, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>): <R>(aRed: ALR<R, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>): <R>(aRed: ALR<S, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>): <R>(aRed: ALR<T, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>): <R>(aRed: ALR<U, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>): <R>(aRed: ALR<V, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>): <R>(aRed: ALR<W, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>): <R>(aRed: ALR<X, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>, aOp_23: ALO<X, Y>): <R>(aRed: ALR<Y, R>) => (z: Lazy<A>) => R;
  <A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z>(aOp_0: ALO<A, B>, aOp_1: ALO<B, C>, aOp_2: ALO<C, D>, aOp_3: ALO<D, E>, aOp_4: ALO<E, F>, aOp_5: ALO<F, G>, aOp_6: ALO<G, H>, aOp_7: ALO<H, I>, aOp_8: ALO<I, J>, aOp_9: ALO<J, K>, aOp_10: ALO<K, L>, aOp_11: ALO<L, M>, aOp_12: ALO<M, N>, aOp_13: ALO<N, O>, aOp_14: ALO<O, P>, aOp_15: ALO<P, Q>, aOp_16: ALO<Q, R>, aOp_17: ALO<R, S>, aOp_18: ALO<S, T>, aOp_19: ALO<T, U>, aOp_20: ALO<U, V>, aOp_21: ALO<V, W>, aOp_22: ALO<W, X>, aOp_23: ALO<X, Y>, aOp_24: ALO<Y, Z>): <R>(aRed: ALR<Z, R>) => (z: Lazy<A>) => R;
}
